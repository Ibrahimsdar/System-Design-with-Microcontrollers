%!PS-Adobe-3.0
%%Title: lab2_code.c
%%For: Ibrahim alarifi
%%Creator: a2ps version 4.14
%%CreationDate: Tue Oct 15 10:52:11 2019
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// lab2_code.c ) c n
(// Skeleton code is made by R. Traylor, 9.12.08) N
(// Modified by Ibrahim Alarifi) N
(// Modified on 10/11/2019) N
() p n
() N
(//  HARDWARE SETUP:) c n
(//  PORTA is connected to the segments of the LED display. and to the pushbutton) N
(s.) N
(//  PORTA.0 corresponds to segment a, PORTA.1 corresponds to segement b, etc.) N
(//  PORTB bits 4-6 go to a,b,c inputs of the 74HC138.) N
(//  PORTB bit 7 goes to the PWM transistor base.) N
() p n
(#define) K
( F_CPU 16000000 ) p
(// cpu speed in hertz ) c n
(#define) K
( TRUE 1) p n
(#define) K
( FALSE 0) p n
(#include) K
( <avr/io.h>) p n
(#include) K
( <util/delay.h>) p n
() N
(// holds the values to control the decoder \(74HC138\) of the 7-segment, to turn o) c n
(n specific digits) N
(uint8_t digit[6] = {) p n
() S 8 T (0x00,) S 16 T () S
(// 1st digit ) c n
() p 8 T (0x10,) S 16 T () S
(// 2nd digit) c n
() p 8 T (0x30,) S 16 T () S
(// 4th digit) c n
() p 8 T (0x40,) S 16 T () S
(// 5th digit) c n
() p 8 T (0x20,) S 16 T () S
(// 3rd digit \(dots\)) c n
() p 8 T (0x70 ) S 16 T () S
(// off state) c n
(};) p n
() N
(// holds the state of each button: 0=off, 1=on) c n
(uint8_t dstate[4] = {1,0,0,0};) p n
() N
(// holds the current value of each digit, initially all digits are zero) c n
(uint8_t dig_value[4] = {) p n
() S 8 T (0,) N
() S 8 T (0,) N
() S 8 T (0,) N
() S 8 T (0) N
(};) N
() N
(// decimal to 7-segment LED display encodings, logic "0" turns on segment) c n
(uint8_t dec_to_7seg[10] = {) p n
() S 8 T (0b11000000,) S 24 T () S
(// zero) c n
() p 8 T (0b11001111,) S 24 T () S
(// one ) c n
() p 8 T (0b10100100,) S 24 T () S
(// two) c n
() p 8 T (0b10110000,) S 24 T () S
(// three) c n
() p 8 T (0b10011001,) S 24 T () S
(// four) c n
() p 8 T (0b10010010,) S 24 T () S
(// five) c n
() p 8 T (0b10000010,) S 24 T () S
(// six) c n
() p 8 T (0b11111000,) S 24 T () S
(// seven) c n
() p 8 T (0b10000000,) S 24 T () S
(// eight) c n
() p 8 T (0b10010000) S 24 T () S
(// nine) c n
(};) p n
() N
() N
(//******************************************************************************) c n
(//                            chk_buttons                                      ) N
(//Checks the state of the button number passed to it. It shifts in ones till   ) N
(//the button is pushed. Function returns a 1 only once per debounced button    ) N
(//push so a debounce and toggle function can be implemented at the same time.  ) N
(//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            ) N
(//Expects active low pushbuttons on PINA port.  Debounce time is determined by ) N
(//external loop delay times 12.) N
(//****This function is heavily based on the debounce function provided in lab1 a) N
(nd lecture notes****) N
(uint8_t chk_buttons\(uint8_t button\) {) p n
() S 8 T () S
(static) K
( uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0}; ) p
(// holds present st) c n
(ate of each button) N
(lab2_code.c) (Page 1/4) (Oct 15, 19 10:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () N
() S 8 T () S
(// this perform an or operation with the previous state value, !bit_is_c) c n
(lear output, and 0xE000) N
() p 8 T () S
(// when the button is pressed, !bit_is_clear return 1 per debounce, with) c n
( the last debounce value) N
() p 8 T () S
(// it will start shifting and or-ing, untill state = 0xF000, then return) c n
( 1 \(button is pressed\)) N
() p 8 T (state[button] = \(state[button] << 1\) | \(! bit_is_clear\(PINA, button\)\) | ) N
(0xE000;) N
() S 8 T () S
(if) K
( \(state[button] == 0xF000\) ) p n
() S 8 T () S 16 T () S
(return) K
( 1;) p n
() S 8 T () S
(else) K n
() p 8 T () S 16 T () S
(return) K
( 0;) p n
(}) N
(//******************************************************************************) c n
() p n
(//******************************************************************************) c n
(*****) N
(//                                   segment_sum                                ) N
(    ) N
(//takes a 16-bit binary input value and places the appropriate equivalent 4 digi) N
(t ) N
(//BCD segment code in the array dig_value for display.                       ) N
(//array is loaded at exit as:  |digit3|digit2|digit1|digit0|) N
(void) k
( segsum\(uint16_t incr\) {) p n
() S 8 T (uint8_t i = 0; ) S
(// loop counter) c n
() p 8 T (dig_value[0] += incr; ) S
(// increment 1st digit in the array based on user') c n
(s choice) N
() p 8 T () S
(while) K
( \(i == 0\){ ) p
(// 1st digit loop) c n
() p 8 T () S 16 T () S
(if) K
(\(dig_value[0] > 9\){) p 40 T () S
(// if the value of 1st digit is higher t) c n
(han 9) N
() p 8 T () S 16 T () S 24 T (++dig_value[1];) S 40 T () S
(// increment the 2nd digit) c n
() p 8 T () S 16 T (        dstate[1] = 1;) S 40 T () S
(// enable state) c 56 T () N
() p 8 T () S 16 T () S 24 T (dig_value[0] -= 10; ) S
(// decrement the 1st digit by 10) c n
() p 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K
() p 24 T () S
(// if the value <= 9 exit the loop) c n
() p 8 T () S 16 T () S 24 T (i = 1;) N
() S 8 T (}) N
() S 8 T () S
(while) K
( \(i == 1\){ ) p
(// 2nd digit loop) c n
() p 8 T () S 16 T () S
(if) K
(\(dig_value[1] > 9\){ ) p
(// if the value of 2nd digit is higher tha) c n
(n 9) N
() p 8 T () S 16 T () S 24 T (++dig_value[2]; ) S
(// increment the 3rd digit) c n
() p 8 T () S 16 T (        dstate[2] = 1;) S 40 T () S
(// enable state) c 56 T () N
() p 8 T () S 16 T () S 24 T (dig_value[1] -= 10; ) S
(// decrement the 2nd digit by 10) c n
() p 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K
( ) p
(// if the value <= 9, exit the loop) c n
() p 8 T () S 16 T () S 24 T (i = 0;) N
() S 8 T (}) N
() S 8 T () S
(while) K
( \(i == 0\){ ) p
(// 3rd digit) c n
() p 8 T () S 16 T () S
(if) K
(\(dig_value[2] > 9\){ ) p
(// if the value of 3rd digit is higher tha) c n
(n 9) N
() p 8 T () S 16 T () S 24 T (++dig_value[3]; ) S
(// increment 4th digit) c n
() p 8 T () S 16 T (        dstate[3] = 1;) S 40 T () S
(// enable state) c 56 T () N
() p 8 T () S 16 T () S 24 T (dig_value[2] -= 10; ) S
(// decrement 3rd digit by 10) c n
() p 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K
( ) p
(// if the value <= 9, exit the loop) c n
() p 8 T () S 16 T () S 24 T (i = 1;) N
() S 8 T (}) N
() S 8 T () S
(// the forth digit doesn't need a loop since the counter roll over when ) c n
(it reaches max) N
() p 8 T () S
(// which is in this case, max = 1023) c n
() p n
(}) S
(//segment_sum) c n
(//******************************************************************************) N
(*****) N
() p n
() N
(//******************************************************************************) c n
(*****) N
(lab2_code.c) (Page 2/4) (Oct 15, 19 10:51) title
border
grestore
(Printed by Ibrahim alarifi) rhead
(lab2_code.c) (1/2) (Tuesday October 15, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(uint8_t main\(\)) p n
({) N
() S 8 T (uint16_t total, incr = 1;) S 40 T () S
(// keep track of increment and total) c n
() p 8 T (uint8_t i, j = 0; ) S 32 T () S
(// loops) c n
() p 8 T (DDRA = 0xFF; ) S 24 T () S
(// PortA as output) c n
() p 8 T (DDRB = 0xFF; ) S 24 T () S
(// PortB as output) c n
() p 8 T (PORTA = dec_to_7seg[0]; ) S 40 T () S
(// Display 0 initially) c n
() p 8 T () S
(while) K
(\(1\){) p n
() S 8 T () S 16 T () S
(// set PorTA as input) c n
() p 8 T () S 16 T (DDRA = 0x00;) N
() S 8 T () S 16 T () S
(// activate pull-ups) c n
() p 8 T () S 16 T (PORTA = 0xFF; ) N
() S 8 T () S 16 T () S
(// enable tristate buffer for pushbutton switches) c n
() p 8 T () S 16 T (PORTB = digit[5];) N
() S 8 T () S 16 T () S
(// zero out values at the beginning of the loop) c n
() p 8 T () S 16 T (i = 0;) N
() S 8 T () S 16 T (incr = 0;) N
() S 8 T () S 16 T () S
(while) K
(\(i<8\){) p 32 T () S
(// loops to check on all the 8 buttons) c n
() p 8 T () S 16 T () S 24 T () S
(for) K
(\(j=0;j<6;j++\){) p 48 T () S
(// loops 6 times per button, I c) c n
(hoose 6 to allow time for button to be detected) N
() p 8 T () S 16 T () S 24 T () S 32 T () S
(switch) K
(\(chk_buttons\(i\)\){) p 56 T () S
(// switch statement to c) c n
(heck if it's pressed or not) N
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(case) K
( 0: ) p
(break) K
(;) p 56 T () S
(// if not) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(case) K
( 1: ) p 56 T () S
(// if button is pressed) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(switch) K
(\(i\){) p 64 T () S
(// i is the inde) c n
(x \(which button was detected) N
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(case) K
( 0: incr = 1; _delay) p n
(_ms\(1\);) S 8 T () S
(// PA0, increment by 1 and delay) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(case) K
( 1: incr = 2; _delay) p n
(_ms\(1\);) S 8 T () S
(// PA1, increment by 2 and delay) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(case) K
( 2: incr = 4; _delay) p n
(_ms\(1\);) S 8 T () S
(// PA2, increment by 4 and delay) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(case) K
( 3: incr = 8; _delay) p n
(_ms\(1\);) S 8 T () S
(// PA3, increment by 8 and delay) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(case) K
( 4: incr = 16; _dela) p n
(y_ms\(1\); ) S
(// PA4, increment by 16 and delay) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(case) K
( 5: incr = 32; _dela) p n
(y_ms\(1\); ) S
(// PA5, increment by 32 and delay) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(case) K
( 6: incr = 64; _dela) p n
(y_ms\(1\); ) S
(// PA6, increment by 64 and delay) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(case) K
( 7: incr = 128; _del) p n
(ay_ms\(1\); ) S
(// PA7, increment by 128 and delay) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(default) K
(: ) p
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (} ) S
(// inner switch) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(break) K
(; ) p
(// end of case 1) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(default) K
(: ) p
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (} ) S
(// outter switch) c n
() p 8 T () S 16 T () S 24 T (} ) S
(// for) c n
() p 8 T () S 16 T () S 24 T (++i;) N
() S 8 T () S 16 T (} ) S
(// while) c n
() p 8 T () S 16 T (total = total + incr;) S 40 T () S
(// increment the total by the value in i) c n
(ncr) N
() p 8 T () S 16 T () S
(// disable tristate buffer for pushbutton switches) c n
() p 8 T () S 16 T (PORTB = digit[0];) N
() S 8 T () S 16 T () S
(// check on the total to make sure it's within the boundries) c n
() p 8 T () S 16 T () S
(if) K
( \(total > 1023\){) p 40 T () S
(// if out of bounderies, roll over start) c n
(ing from one) N
() p 8 T () S 16 T () S 24 T (dig_value[0] = 1;) S 48 T () S
(// digit 1) c n
() p 8 T () S 16 T () S 24 T (dig_value[1] = 0;) S 48 T () S
(// digit 2) c n
() p 8 T () S 16 T () S 24 T (dig_value[2] = 0;) S 48 T () S
(// digit 3) c n
() p 8 T () S 16 T () S 24 T (dig_value[3] = 0;) S 48 T () S
(// digit 4) c n
(lab2_code.c) (Page 3/4) (Oct 15, 19 10:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T (dstate[1] = 0;) N
() S 8 T () S 16 T () S 24 T (dstate[2] = 0;) N
() S 8 T () S 16 T () S 24 T (dstate[3] = 0;) N
() S 8 T () S 16 T () S 24 T (total=1;) S 40 T () S
(// clear the total) c n
() p 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K
( ) p
(// if not out of bounderies, call segsum to update the valu) c n
(es with the new ones) N
() p 8 T () S 16 T () S 24 T (segsum\(incr\);) S 40 T () N
() S 8 T () S 16 T () S
(// make PortA an output) c n
() p 8 T () S 16 T (DDRA = 0xFF;) N
() S 8 T () S 16 T () S
(// a loop to display all digit ) c n
() p 8 T () S 16 T () S
(for) K
(\(i=0; i<4; i++\){) p n
() S 8 T () S 16 T () S 24 T () S
(// update PORTA with the corresponding digit value \(ith ) c n
(digit\)) N
() p 8 T () S 16 T () S 24 T () S
(if) K
(\(dig_value[i] == 0 && dstate[i] == 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (PORTA = 0xFF;) N
() S 8 T () S 16 T () S 24 T () S
(else) K
( ) p n
() S 8 T () S 16 T () S 24 T () S 32 T (PORTA = dec_to_7seg[dig_value[i]];) N
() S 8 T () S 16 T () S 24 T () S
(// update PORTB to turn on the digit \(ith digit\)) c n
() p 8 T () S 16 T () S 24 T (PORTB = digit[i];) N
() S 8 T () S 16 T () S 24 T () S
(// delay to balance on/off time) c n
() p 8 T () S 16 T () S 24 T (_delay_ms\(1\);) N
() S 8 T () S 16 T (}) N
() S 8 T (}) S
(// while) c n
(}) p
(// main) c n
(lab2_code.c) (Page 4/4) (Oct 15, 19 10:51) title
border
grestore
(Printed by Ibrahim alarifi) rhead
(lab2_code.c) (2/2) (Tuesday October 15, 2019) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
